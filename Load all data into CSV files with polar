{"metadata":{"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9323836,"sourceType":"datasetVersion","datasetId":5648283},{"sourceId":9337355,"sourceType":"datasetVersion","datasetId":5658228},{"sourceId":9337863,"sourceType":"datasetVersion","datasetId":5658603},{"sourceId":9338379,"sourceType":"datasetVersion","datasetId":5658995},{"sourceId":9338614,"sourceType":"datasetVersion","datasetId":5659160}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Overview\n\nIn this notebook, we will process and represent time-series data. There are two important parameters\n\n## The length of time-series data\n\nDefault is 72 hours\n\n## The bucket size\n\nThe bucket size which tells in what size time windows we want to divide our time-series data. For example, if we select 2 bucket size, it will aggregate data for every 2 hours and a time-series of length 24 hours will be represented as time-series with 12 time-windows where data for every 2 hours is aggregated from original raw tim-series.\n\nWe will save the time-series data in data dictionaries in the format that can be directly used for the next step(deep learning analysis.)\n\n\n# Data Imputation\n\nThe data imputation is optional feature. It will be done by forward fill and mean or median imputation. Values will be forward fill first and if no value exists for that admission we will use mean or median value for the patient.","metadata":{}},{"cell_type":"code","source":"import polars as pl\nfrom tqdm import tqdm\nimport pickle\nimport os\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nif_mort=True\nif_admn=False\nif_los=False\nfeat_cond=True # diagnosis\nfeat_proc=True # procedures\nfeat_out=True # out events\nfeat_chart=True # chart events\nfeat_med=True # medications\nimpute=False\ninclude_time=72\nbucket=1\npredW=2","metadata":{"execution":{"iopub.status.busy":"2024-09-13T14:30:58.911918Z","iopub.execute_input":"2024-09-13T14:30:58.912436Z","iopub.status.idle":"2024-09-13T14:30:59.295564Z","shell.execute_reply.started":"2024-09-13T14:30:58.912394Z","shell.execute_reply":"2024-09-13T14:30:59.294321Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"# Load the base data(patient cohort)","metadata":{}},{"cell_type":"code","source":"data = pl.read_csv('/kaggle/input/mimic-iv-classification-regression-tasks/mimic_iv_classification_regression_tasks.csv')\ndata = data.with_columns([\n    pl.col('intime').str.strptime(pl.Datetime, format='%Y-%m-%d %H:%M:%S'),\n    pl.col('outtime').str.strptime(pl.Datetime, format='%Y-%m-%d %H:%M:%S')\n])\n\ndata = data.with_columns([\n    (pl.col('outtime') - pl.col('intime')).alias('los')\n])\ndata = data.with_columns([\n    pl.col('los').cast(pl.Float64) / 3600000000.0  # Convert seconds to hours\n])\ndata = data.filter(pl.col('los') > 0)\ndata = data.with_columns([\n    pl.col('Age').cast(pl.Int32),\n    pl.col('los').floor().cast(pl.Int32).alias('los') # Take the integer part of 'los'\n])\ndata = data.with_columns([\n    pl.col('intime').dt.strftime('%Y-%m-%d %H:%M:%S').alias('intime'),\n    pl.col('outtime').dt.strftime('%Y-%m-%d %H:%M:%S').alias('outtime')\n])\ndata.write_csv('mimic_iv_classification_regression_tasks.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:11:37.308736Z","iopub.execute_input":"2024-09-13T15:11:37.309171Z","iopub.status.idle":"2024-09-13T15:11:37.468734Z","shell.execute_reply.started":"2024-09-13T15:11:37.309129Z","shell.execute_reply":"2024-09-13T15:11:37.467436Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"# Load all the features\n\nWe will load all the datasets in here","metadata":{}},{"cell_type":"code","source":"print(\"[ ======READING DIAGNOSIS ]\")\ncond = pl.read_csv(\"/kaggle/input/reduce-dimension-mimic-iv-v2-0-icu-diagnosis-icd10/dimension_reduce_diag_icu.csv\")\ncond = cond.filter(pl.col('stay_id').is_in(data['stay_id']))\n\n# Group by 'stay_id' and count the occurrences, then find the maximum count\ncond_per_adm = cond.group_by('stay_id').agg(pl.count('stay_id').alias('count')).select(pl.col('count').max()).to_numpy()[0][0]\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:27:08.888331Z","iopub.execute_input":"2024-09-13T15:27:08.889394Z","iopub.status.idle":"2024-09-13T15:27:09.168692Z","shell.execute_reply.started":"2024-09-13T15:27:08.889159Z","shell.execute_reply":"2024-09-13T15:27:09.166771Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"[ ======READING DIAGNOSIS ]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(cond_per_adm)","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:27:12.369054Z","iopub.execute_input":"2024-09-13T15:27:12.369543Z","iopub.status.idle":"2024-09-13T15:27:12.376101Z","shell.execute_reply.started":"2024-09-13T15:27:12.369499Z","shell.execute_reply":"2024-09-13T15:27:12.374937Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"39\n","output_type":"stream"}]},{"cell_type":"code","source":"cond.write_csv('dimension_reduce_diag_icu.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:27:14.689297Z","iopub.execute_input":"2024-09-13T15:27:14.689738Z","iopub.status.idle":"2024-09-13T15:27:14.891272Z","shell.execute_reply.started":"2024-09-13T15:27:14.689698Z","shell.execute_reply":"2024-09-13T15:27:14.890047Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"print(\"[ ======READING PROCEDURES ]\")\nproc = pl.read_csv(\"/kaggle/input/mimic-iv-v2-0-icu-procedures/preproc_proc_icu.csv\")\nproc = proc.filter(pl.col('stay_id').is_in(data['stay_id']))\n\n# Convert 'event_time_from_admit' to string if it's not already\nproc = proc.with_columns([\n    pl.col('event_time_from_admit').cast(pl.Utf8)\n])\n\n# Split 'event_time_from_admit' into 'start_days' and 'start_hours'\nproc = proc.with_columns([\n    pl.col('event_time_from_admit').apply(lambda x: x.split(' '), return_dtype=pl.List(pl.Utf8)).alias('split_event_time')\n])\nproc = proc.with_columns([\n    pl.col('split_event_time').arr.get(0).alias('start_days'),\n    pl.col('split_event_time').arr.get(1).alias('start_hours')\n])\n\n# Split 'start_hours' into 'hours', 'minutes', and 'seconds'\nproc = proc.with_columns([\n    pl.col('start_hours').apply(lambda x: x.split(':'), return_dtype=pl.List(pl.Utf8)).alias('split_start_hours')\n])\nproc = proc.with_columns([\n    pl.col('split_start_hours').arr.get(0).alias('hours'),\n    pl.col('split_start_hours').arr.get(1).alias('minutes'),\n    pl.col('split_start_hours').arr.get(2).alias('seconds')\n])\n\n# Calculate 'start_time'\nproc = proc.with_columns([\n    (pl.col('start_days').cast(pl.Int32) * 24 + pl.col('hours').cast(pl.Int32)).alias('start_time')\n])\n\n# Drop unnecessary columns\nproc = proc.drop(['start_days', 'start_hours', 'minutes', 'seconds', 'split_event_time', 'split_start_hours'])\n\n# Filter and join with 'data'\nproc = proc.filter(pl.col('start_time') >= 0)\nproc = proc.join(data.select(['stay_id', 'los']), on='stay_id', how='left')\n\n# Calculate 'sanity' and filter\nproc = proc.with_columns([\n    (pl.col('los') - pl.col('start_time')).alias('sanity')\n])\nproc = proc.filter(pl.col('sanity') > 0)\nproc = proc.drop('sanity')","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:38:17.304701Z","iopub.execute_input":"2024-09-13T15:38:17.305188Z","iopub.status.idle":"2024-09-13T15:38:17.523216Z","shell.execute_reply.started":"2024-09-13T15:38:17.305146Z","shell.execute_reply":"2024-09-13T15:38:17.521679Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"[ ======READING PROCEDURES ]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[39], line 12\u001b[0m\n\u001b[1;32m      6\u001b[0m proc \u001b[38;5;241m=\u001b[39m proc\u001b[38;5;241m.\u001b[39mwith_columns([\n\u001b[1;32m      7\u001b[0m     pl\u001b[38;5;241m.\u001b[39mcol(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mevent_time_from_admit\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mcast(pl\u001b[38;5;241m.\u001b[39mUtf8)\n\u001b[1;32m      8\u001b[0m ])\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Split 'event_time_from_admit' into 'start_days' and 'start_hours'\u001b[39;00m\n\u001b[1;32m     11\u001b[0m proc \u001b[38;5;241m=\u001b[39m proc\u001b[38;5;241m.\u001b[39mwith_columns([\n\u001b[0;32m---> 12\u001b[0m     \u001b[43mpl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcol\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mevent_time_from_admit\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m(\u001b[38;5;28;01mlambda\u001b[39;00m x: x\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m'\u001b[39m), return_dtype\u001b[38;5;241m=\u001b[39mpl\u001b[38;5;241m.\u001b[39mList(pl\u001b[38;5;241m.\u001b[39mUtf8))\u001b[38;5;241m.\u001b[39malias(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msplit_event_time\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     13\u001b[0m ])\n\u001b[1;32m     14\u001b[0m proc \u001b[38;5;241m=\u001b[39m proc\u001b[38;5;241m.\u001b[39mwith_columns([\n\u001b[1;32m     15\u001b[0m     pl\u001b[38;5;241m.\u001b[39mcol(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msplit_event_time\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39marr\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39malias(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstart_days\u001b[39m\u001b[38;5;124m'\u001b[39m),\n\u001b[1;32m     16\u001b[0m     pl\u001b[38;5;241m.\u001b[39mcol(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msplit_event_time\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39marr\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;241m1\u001b[39m)\u001b[38;5;241m.\u001b[39malias(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstart_hours\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     17\u001b[0m ])\n\u001b[1;32m     19\u001b[0m \u001b[38;5;66;03m# Split 'start_hours' into 'hours', 'minutes', and 'seconds'\u001b[39;00m\n","\u001b[0;31mAttributeError\u001b[0m: 'Expr' object has no attribute 'apply'"],"ename":"AttributeError","evalue":"'Expr' object has no attribute 'apply'","output_type":"error"}]},{"cell_type":"code","source":"proc.to_csv('preproc_proc_icu.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-13T14:06:10.507386Z","iopub.execute_input":"2024-09-13T14:06:10.507875Z","iopub.status.idle":"2024-09-13T14:06:13.840826Z","shell.execute_reply.started":"2024-09-13T14:06:10.507829Z","shell.execute_reply":"2024-09-13T14:06:13.839002Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"print(\"[ ======READING OUT EVENTS ]\")\n\nout=pd.read_csv(\"/kaggle/input/mimic-iv-v2-0-icu-output-events-data/preproc_out_icu.csv\", header=0, index_col=None)\nout=out[out['stay_id'].isin(data['stay_id'])]\nout[['start_days', 'dummy','start_hours']] = out['event_time_from_admit'].str.split(' ', n=-1, expand=True)\nout[['start_hours','min','sec']] = out['start_hours'].str.split(':', n=-1, expand=True)\nout['start_time']=pd.to_numeric(out['start_days'])*24+pd.to_numeric(out['start_hours'])\nout=out.drop(columns=['start_days', 'dummy','start_hours','min','sec'])\nout=out[out['start_time']>=0]\n\n###Remove where event time is after discharge time\nout=pd.merge(out,data[['stay_id','los']],on='stay_id',how='left')\nout['sanity']=out['los']-out['start_time']\nout=out[out['sanity']>0]\ndel out['sanity']","metadata":{"execution":{"iopub.status.busy":"2024-09-13T14:06:13.843764Z","iopub.execute_input":"2024-09-13T14:06:13.844472Z","iopub.status.idle":"2024-09-13T14:07:06.697088Z","shell.execute_reply.started":"2024-09-13T14:06:13.844408Z","shell.execute_reply":"2024-09-13T14:07:06.695918Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"[ ======READING OUT EVENTS ]\n","output_type":"stream"}]},{"cell_type":"code","source":"out.to_csv('preproc_out_icu.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-13T14:07:06.698616Z","iopub.execute_input":"2024-09-13T14:07:06.699072Z","iopub.status.idle":"2024-09-13T14:07:28.302228Z","shell.execute_reply.started":"2024-09-13T14:07:06.699022Z","shell.execute_reply":"2024-09-13T14:07:28.300659Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"print(\"[ ======READING MEDICATIONS ]\")\n\nmeds=pd.read_csv(\"/kaggle/input/mimic-iv-v2-0-icu-medications-data/preproc_med_icu.csv\", header=0, index_col=None)\nmeds[['start_days', 'dummy','start_hours']] = meds['start_hours_from_admit'].str.split(' ', n=-1, expand=True)\nmeds[['start_hours','min','sec']] = meds['start_hours'].str.split(':', n=-1, expand=True)\nmeds['start_time']=pd.to_numeric(meds['start_days'])*24+pd.to_numeric(meds['start_hours'])\nmeds[['start_days', 'dummy','start_hours']] = meds['stop_hours_from_admit'].str.split(' ', n=-1, expand=True)\nmeds[['start_hours','min','sec']] = meds['start_hours'].str.split(':', n=-1, expand=True)\nmeds['stop_time']=pd.to_numeric(meds['start_days'])*24+pd.to_numeric(meds['start_hours'])\nmeds=meds.drop(columns=['start_days', 'dummy','start_hours','min','sec'])\n#####Sanity check\nmeds['sanity']=meds['stop_time']-meds['start_time']\nmeds=meds[meds['sanity']>0]\ndel meds['sanity']\n#####Select hadm_id as in main file\nmeds=meds[meds['stay_id'].isin(data['stay_id'])]\nmeds=pd.merge(meds,data[['stay_id','los']],on='stay_id',how='left')\n\n#####Remove where start time is after end of visit\nmeds['sanity']=meds['los']-meds['start_time']\nmeds=meds[meds['sanity']>0]\ndel meds['sanity']\n####Any stop_time after end of visit is set at end of visit\nmeds.loc[meds['stop_time'] > meds['los'],'stop_time']=meds.loc[meds['stop_time'] > meds['los'],'los']\ndel meds['los']\n\nmeds['rate']=meds['rate'].apply(pd.to_numeric, errors='coerce')\nmeds['amount']=meds['amount'].apply(pd.to_numeric, errors='coerce')","metadata":{"execution":{"iopub.status.busy":"2024-09-13T14:07:28.306122Z","iopub.execute_input":"2024-09-13T14:07:28.306561Z","iopub.status.idle":"2024-09-13T14:09:59.773270Z","shell.execute_reply.started":"2024-09-13T14:07:28.306515Z","shell.execute_reply":"2024-09-13T14:09:59.771720Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"[ ======READING MEDICATIONS ]\n","output_type":"stream"}]},{"cell_type":"code","source":"meds.to_csv('preproc_med_icu.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-13T14:09:59.774587Z","iopub.execute_input":"2024-09-13T14:09:59.774956Z","iopub.status.idle":"2024-09-13T14:10:40.730477Z","shell.execute_reply.started":"2024-09-13T14:09:59.774917Z","shell.execute_reply":"2024-09-13T14:10:40.729172Z"},"trusted":true},"execution_count":11,"outputs":[]}]}