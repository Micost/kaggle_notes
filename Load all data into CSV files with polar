{"metadata":{"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9323836,"sourceType":"datasetVersion","datasetId":5648283},{"sourceId":9337355,"sourceType":"datasetVersion","datasetId":5658228},{"sourceId":9337863,"sourceType":"datasetVersion","datasetId":5658603},{"sourceId":9338379,"sourceType":"datasetVersion","datasetId":5658995},{"sourceId":9338614,"sourceType":"datasetVersion","datasetId":5659160}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Overview\n\nIn this notebook, we will process and represent time-series data. There are two important parameters\n\n## The length of time-series data\n\nDefault is 72 hours\n\n## The bucket size\n\nThe bucket size which tells in what size time windows we want to divide our time-series data. For example, if we select 2 bucket size, it will aggregate data for every 2 hours and a time-series of length 24 hours will be represented as time-series with 12 time-windows where data for every 2 hours is aggregated from original raw tim-series.\n\nWe will save the time-series data in data dictionaries in the format that can be directly used for the next step(deep learning analysis.)\n\n\n# Data Imputation\n\nThe data imputation is optional feature. It will be done by forward fill and mean or median imputation. Values will be forward fill first and if no value exists for that admission we will use mean or median value for the patient.","metadata":{}},{"cell_type":"code","source":"import polars as pl\nfrom tqdm import tqdm\nimport pickle\nimport os\nimport numpy as np\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nif_mort=True\nif_admn=False\nif_los=False\nfeat_cond=True # diagnosis\nfeat_proc=True # procedures\nfeat_out=True # out events\nfeat_chart=True # chart events\nfeat_med=True # medications\nimpute=False\ninclude_time=72\nbucket=1\npredW=2","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:33.953509Z","iopub.execute_input":"2024-09-16T07:10:33.953965Z","iopub.status.idle":"2024-09-16T07:10:33.962297Z","shell.execute_reply.started":"2024-09-16T07:10:33.953922Z","shell.execute_reply":"2024-09-16T07:10:33.960744Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":"# Load the base data(patient cohort)","metadata":{}},{"cell_type":"code","source":"data = pl.read_csv('/kaggle/input/mimic-iv-classification-regression-tasks/mimic_iv_classification_regression_tasks.csv')\ndata = data.with_columns([\n    pl.col('intime').str.strptime(pl.Datetime, format='%Y-%m-%d %H:%M:%S'),\n    pl.col('outtime').str.strptime(pl.Datetime, format='%Y-%m-%d %H:%M:%S')\n])\n\ndata = data.with_columns([\n    (pl.col('outtime') - pl.col('intime')).alias('los')\n])\ndata = data.with_columns([\n    pl.col('los').cast(pl.Float64) / 3600000000.0  # Convert seconds to hours\n])\ndata = data.filter(pl.col('los') > 0)\ndata = data.with_columns([\n    pl.col('Age').cast(pl.Int32),\n    pl.col('los').floor().cast(pl.Int32).alias('los') # Take the integer part of 'los'\n])\ndata = data.with_columns([\n    pl.col('intime').dt.strftime('%Y-%m-%d %H:%M:%S').alias('intime'),\n    pl.col('outtime').dt.strftime('%Y-%m-%d %H:%M:%S').alias('outtime')\n])\ndata.write_csv('mimic_iv_classification_regression_tasks.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:33.964962Z","iopub.execute_input":"2024-09-16T07:10:33.965773Z","iopub.status.idle":"2024-09-16T07:10:34.111498Z","shell.execute_reply.started":"2024-09-16T07:10:33.965722Z","shell.execute_reply":"2024-09-16T07:10:34.110207Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"markdown","source":"# Load all the features\n\nWe will load all the datasets in here","metadata":{}},{"cell_type":"code","source":"print(\"[ ======READING DIAGNOSIS ]\")\ncond = pl.read_csv(\"/kaggle/input/reduce-dimension-mimic-iv-v2-0-icu-diagnosis-icd10/dimension_reduce_diag_icu.csv\")\ncond = cond.filter(pl.col('stay_id').is_in(data['stay_id']))\n\n# Group by 'stay_id' and count the occurrences, then find the maximum count\ncond_per_adm = cond.group_by('stay_id').agg(pl.count('stay_id').alias('count')).select(pl.col('count').max()).to_numpy()[0][0]\n","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:34.113832Z","iopub.execute_input":"2024-09-16T07:10:34.114355Z","iopub.status.idle":"2024-09-16T07:10:34.319211Z","shell.execute_reply.started":"2024-09-16T07:10:34.114298Z","shell.execute_reply":"2024-09-16T07:10:34.317775Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"[ ======READING DIAGNOSIS ]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(cond_per_adm)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:34.320721Z","iopub.execute_input":"2024-09-16T07:10:34.321140Z","iopub.status.idle":"2024-09-16T07:10:34.327092Z","shell.execute_reply.started":"2024-09-16T07:10:34.321097Z","shell.execute_reply":"2024-09-16T07:10:34.325830Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"39\n","output_type":"stream"}]},{"cell_type":"code","source":"cond.write_csv('dimension_reduce_diag_icu.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:34.329665Z","iopub.execute_input":"2024-09-16T07:10:34.330094Z","iopub.status.idle":"2024-09-16T07:10:34.511259Z","shell.execute_reply.started":"2024-09-16T07:10:34.330050Z","shell.execute_reply":"2024-09-16T07:10:34.509698Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"print(\"[ ======READING PROCEDURES ]\")\nproc = pl.read_csv(\"/kaggle/input/mimic-iv-v2-0-icu-procedures/preproc_proc_icu.csv\")\n\n\n# Filter rows based on stay_id\nproc = proc.join(\n    data.select([\"stay_id\", \"los\"]),\n    on=\"stay_id\",\n    how=\"inner\",\n)\n\n# # Split event_time_from_admit and extract start_time\nproc = proc.with_columns(\n    pl.col(\"event_time_from_admit\").str.split(\" \").alias(\"split_event_time\"),\n)\nproc = proc.with_columns([\n    pl.col(\"split_event_time\").list.last().str.split(\":\").alias('event_time'),\n    pl.col(\"split_event_time\").list.first().alias('event_days'),\n])\nproc = proc.with_columns(\n    pl.col(\"event_time\").list.get(0).alias('event_hours')\n)\nproc = proc.with_columns([\n    pl.col(\"event_days\").cast(pl.Int8).alias(\"event_days\"),\n    pl.col(\"event_hours\").cast(pl.Int8).alias(\"event_hours\"),\n])\nproc = proc.with_columns([\n    (pl.col('event_days') * 24 + pl.col('event_hours')).alias('start_time')\n])\n\nproc = proc.drop([\"split_event_time\", \"event_days\", \"event_hours\",\"event_time\"])\n\n# Filter rows with start_time >= 0 and sanity > 0\nproc = proc.filter(pl.col(\"start_time\") >= 0)\nproc = proc.with_columns((pl.col(\"los\") - pl.col(\"start_time\")).alias(\"sanity\"))\nproc = proc.filter(pl.col(\"sanity\") > 0)\nproc = proc.drop([\"sanity\"])\nfirst_row = proc.head(1)\n\nprint(first_row)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:11:32.066383Z","iopub.execute_input":"2024-09-16T07:11:32.066921Z","iopub.status.idle":"2024-09-16T07:11:32.640645Z","shell.execute_reply.started":"2024-09-16T07:11:32.066869Z","shell.execute_reply":"2024-09-16T07:11:32.639112Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"[ ======READING PROCEDURES ]\nshape: (1, 9)\n┌────────────┬──────────┬──────────┬────────┬───┬────────────┬──────────────────┬─────┬────────────┐\n│ subject_id ┆ hadm_id  ┆ stay_id  ┆ itemid ┆ … ┆ intime     ┆ event_time_from_ ┆ los ┆ start_time │\n│ ---        ┆ ---      ┆ ---      ┆ ---    ┆   ┆ ---        ┆ admit            ┆ --- ┆ ---        │\n│ i64        ┆ i64      ┆ i64      ┆ i64    ┆   ┆ str        ┆ ---              ┆ i32 ┆ i8         │\n│            ┆          ┆          ┆        ┆   ┆            ┆ str              ┆     ┆            │\n╞════════════╪══════════╪══════════╪════════╪═══╪════════════╪══════════════════╪═════╪════════════╡\n│ 10000032   ┆ 29079034 ┆ 39553978 ┆ 224275 ┆ … ┆ 2180-07-23 ┆ 0 days 00:24:00  ┆ 9   ┆ 0          │\n│            ┆          ┆          ┆        ┆   ┆ 14:00:00   ┆                  ┆     ┆            │\n└────────────┴──────────┴──────────┴────────┴───┴────────────┴──────────────────┴─────┴────────────┘\n","output_type":"stream"}]},{"cell_type":"code","source":"proc.write_csv('preproc_proc_icu.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:11:37.122415Z","iopub.execute_input":"2024-09-16T07:11:37.122896Z","iopub.status.idle":"2024-09-16T07:11:37.336019Z","shell.execute_reply.started":"2024-09-16T07:11:37.122854Z","shell.execute_reply":"2024-09-16T07:11:37.334680Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"print(\"[ ======READING OUT EVENTS ]\")\nout = pl.read_csv(\"/kaggle/input/mimic-iv-v2-0-icu-output-events-data/preproc_out_icu.csv\")\nout = out.filter(pl.col('stay_id').is_in(data['stay_id']))\nout = out.with_columns([\n    pl.col('event_time_from_admit').str.split(' ').alias('split_event_time')\n])\nout = out.with_columns([\n    (pl.col('split_event_time').arr.get(0).cast(pl.Int32) * 24 + pl.col('split_event_time').arr.get(1).str.split(':').arr.get(0).cast(pl.Int32)).alias('start_time')\n])\nout = out.filter(pl.col('start_time') >= 0)\nout = out.join(data.select(['stay_id', 'los']), on='stay_id', how='left')\nout = out.with_columns([\n    (pl.col('los') - pl.col('start_time')).alias('sanity')\n])\nout = out.filter(pl.col('sanity') > 0)\nout = out.drop('sanity')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:35.093052Z","iopub.status.idle":"2024-09-16T07:10:35.093497Z","shell.execute_reply.started":"2024-09-16T07:10:35.093280Z","shell.execute_reply":"2024-09-16T07:10:35.093301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"out.write_csv('preproc_out_icu.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:35.095644Z","iopub.status.idle":"2024-09-16T07:10:35.096163Z","shell.execute_reply.started":"2024-09-16T07:10:35.095888Z","shell.execute_reply":"2024-09-16T07:10:35.095912Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"[ ======READING MEDICATIONS ]\")\nmeds = pl.read_csv(\"/kaggle/input/mimic-iv-v2-0-icu-medications-data/preproc_med_icu.csv\")\nmeds = meds.with_columns([\n    pl.col('start_hours_from_admit').str.split(' ').alias('split_start_time'),\n    pl.col('stop_hours_from_admit').str.split(' ').alias('split_stop_time')\n])\nmeds = meds.with_columns([\n    (pl.col('split_start_time').arr.get(0).cast(pl.Int32) * 24 + pl.col('split_start_time').arr.get(1).str.split(':').arr.get(0).cast(pl.Int32)).alias('start_time'),\n    (pl.col('split_stop_time').arr.get(0).cast(pl.Int32) * 24 + pl.col('split_stop_time').arr.get(1).str.split(':').arr.get(0).cast(pl.Int32)).alias('stop_time')\n])\nmeds = meds.filter((pl.col('stop_time') - pl.col('start_time')) > 0)\nmeds = meds.filter(pl.col('stay_id').is_in(data['stay_id']))\nmeds = meds.join(data.select(['stay_id', 'los']), on='stay_id', how='left')\nmeds = meds.filter((pl.col('los') - pl.col('start_time')) > 0)\nmeds = meds.with_columns([\n    pl.when(pl.col('stop_time') > pl.col('los')).then(pl.col('los')).otherwise(pl.col('stop_time')).alias('stop_time')\n])\nmeds = meds.drop('los')\nmeds = meds.with_columns([\n    pl.col('rate').cast(pl.Float64),\n    pl.col('amount').cast(pl.Float64)\n])\n","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:35.097625Z","iopub.status.idle":"2024-09-16T07:10:35.098119Z","shell.execute_reply.started":"2024-09-16T07:10:35.097865Z","shell.execute_reply":"2024-09-16T07:10:35.097888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"meds.to_csv('preproc_med_icu.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T07:10:35.099861Z","iopub.status.idle":"2024-09-16T07:10:35.100402Z","shell.execute_reply.started":"2024-09-16T07:10:35.100164Z","shell.execute_reply":"2024-09-16T07:10:35.100189Z"},"trusted":true},"execution_count":null,"outputs":[]}]}