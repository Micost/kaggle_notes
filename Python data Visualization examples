{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introducation\n\nThis is a exmample of using different libs of data visualization based on article https://medium.com/@shahooda637/mastering-data-visualization-with-python-a-comprehensive-guide-3b832055cbfe\n\n# Matplotlib","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-05-07T15:28:04.750993Z","iopub.execute_input":"2024-05-07T15:28:04.751525Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Line Plot","metadata":{}},{"cell_type":"code","source":"x = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Simple Line Plot')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Scatter Plot","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\nx = np.random.rand(50)\ny = np.random.rand(50)\n\nplt.scatter(x, y, c =\"blue\")\n\n# To show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Bar Plot","metadata":{}},{"cell_type":"code","source":"categories = ['A', 'B', 'C', 'D']\nvalues = [3, 7, 1, 4]\n\nplt.bar(categories, values, color='green')\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Simple Bar Plot')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Histogram","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\ndata = np.random.randn(1000)  # Example data\nplt.hist(data, bins=30, color='skyblue', edgecolor='black')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram Example')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Box Plot","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\n# Generating example data\ndata = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\n# Creating a box plot\nplt.boxplot(data, labels=['Box 1', 'Box 2', 'Box 3'], vert=True, patch_artist=True)\n\n# Adding labels and title\nplt.xlabel('Box')\nplt.ylabel('Values')\nplt.title('Box Plot Example')\n\n# Show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Pie Chart","metadata":{}},{"cell_type":"code","source":"labels = ['Category A', 'Category B', 'Category C']\nsizes = [30, 45, 25]\n\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=['gold', 'lightcoral', 'lightskyblue'])\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Pie Chart Example')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Area Plots","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\n# Generating example data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Creating an area plot\nplt.fill_between(x, y1, y2, color='green', alpha=0.6, label='Area Plot')\n\n# Adding labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('sin - cos Area Plot')\n\n# Show the legend\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Seaborn","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Line Plot","metadata":{}},{"cell_type":"code","source":"# Example data\nx_values = [1, 2, 3, 4, 5]\ny_values = [10, 8, 12, 15, 11]\n\n# Create a line plot\nsns.lineplot(x=x_values, y=y_values, color='green', label='Line Plot')\n\n# Add labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Seaborn Line Plot Example')\n\n# Show the legend\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Scatter Plot","metadata":{}},{"cell_type":"code","source":"import seaborn\n\n\nseaborn.set(style='whitegrid')\nfmri = seaborn.load_dataset(\"fmri\")\n\nseaborn.scatterplot(x=\"timepoint\",\n     y=\"signal\",\n     data=fmri)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Bar Plot","metadata":{}},{"cell_type":"code","source":"# Example data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [25, 40, 30, 35]\n\n# Create a bar plot\nsns.barplot(x=categories, y=values, color='skyblue')\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Seaborn Bar Plot Example')\n\n# Show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Histograms","metadata":{}},{"cell_type":"code","source":"# Example data\ndata = sns.load_dataset('tips')['total_bill']\n\n# Create a histogram\nsns.histplot(data, kde=True, color='salmon', bins=20)\n\n# Add labels and title\nplt.xlabel('Total Bill Amount')\nplt.ylabel('Frequency')\nplt.title('Seaborn Histogram Example')\n\n# Show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Box Plot","metadata":{}},{"cell_type":"code","source":"# Example data\ndata = sns.load_dataset('tips')\n\n# Create a box plot\nsns.boxplot(x='day', y='total_bill', data=data, palette='viridis')\n\n# Add labels and title\nplt.xlabel('Day of the Week')\nplt.ylabel('Total Bill Amount')\nplt.title('Seaborn Box Plot Example')\n\n# Show the plot\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Ploty","metadata":{}},{"cell_type":"code","source":"import plotly.express as px","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Interactive Line Chart","metadata":{}},{"cell_type":"code","source":"df = px.data.stocks()\nfig = px.line(df, x='date', y='GOOG', title='Interactive Line Chart')\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Dynamic Scatter Plot","metadata":{}},{"cell_type":"code","source":"df = px.data.iris()\nfig = px.scatter(df, x='sepal_width', y='sepal_length', color='species', size='petal_length',\n                 title='Dynamic Scatter Plot')\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Interactive Bar Chart","metadata":{}},{"cell_type":"code","source":"df = px.data.tips()\nfig = px.bar(df, x='day', y='total_bill', color='sex', barmode='group',\n             title='Interactive Bar Chart')\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Interactive Heatmap","metadata":{}},{"cell_type":"code","source":"df = px.data.iris()\nfig = px.imshow(df.corr(), labels=dict(color='Correlation'), title='Interactive Heatmap')\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3D Surface Plot","metadata":{}},{"cell_type":"code","source":"import plotly.graph_objects as go\nimport numpy as np\n\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\nfig = go.Figure(data=[go.Surface(z=z, x=x, y=y)])\nfig.update_layout(scene=dict(zaxis=dict(range=[-2, 2])))\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Specialized Plots for Data Insights\n\n## Heatmaps for Correlation Analysis","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the iris dataset into a Pandas dataframe\niris_data = sns.load_dataset('iris')\n\n# Creating the correlation matrix of the iris dataset\niris_corr_matrix = iris_data.corr()\n\n# Add title and labels to the heatmap\nplt.title('Correlation matrix of the iris dataset')\nplt.xlabel('Variables')\nplt.ylabel('Variables')\n\n# Create the heatmap using the `heatmap` function of Seaborn\nsns.heatmap(iris_corr_matrix, cmap='coolwarm', annot=True)\n\n# Display the heatmap using the `show` method of the `pyplot` module from matplotlib.\nplt.show()\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Violin Plots for Distribution Comparison","metadata":{}},{"cell_type":"code","source":"# Add title and labels to the plot\nplt.title('Distribution of tip variable between smoker and non-smoker groups')\nplt.xlabel('Smoker')\nplt.ylabel('Tip')\n\n# Create the violin plot using the `violinplot` function of Seaborn\nsns.violinplot(x='smoker', y='tip', data=tips_data, palette=\"Greens\")\n\n# Display the plot using the `show` method of the `pyplot` module from matplotlib.\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Pair Plots for Multivariate Analysis","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load a sample dataset\niris = sns.load_dataset(\"iris\")\n\n# Create a pair plot\nsns.pairplot(iris, hue=\"species\")\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Radar Charts for Multidimensional Comparison","metadata":{}},{"cell_type":"code","source":"import plotly.express as px\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D', 'E'],\n    'Value': [4, 2, 5, 3, 1]\n}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Plot radar graph\nfig = px.line_polar(df, r='Value', theta='Category', line_close=True)\n\n# Show the plot\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Price', 'Quality', 'Popularity', 'User Ratings']\nproduct_A = [4, 5, 3, 4.5]\nproduct_B = [3, 4.5, 4, 3.5]\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle of each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start element to the end.\nvalues_A = product_A + [product_A[0]]\nvalues_B = product_B + [product_B[0]]\nangles += angles[:1]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\nax.fill(angles, values_A, color='blue', alpha=0.25, label='Product A')\nax.fill(angles, values_B, color='green', alpha=0.25, label='Product B')\n# ax.set_thetagrids(np.degrees(angles), categories)\nax.set_title('Product Comparison - Radar Chart')\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}